
class BitmaskPrinter:

   bitmask_object_template = '''/* Autogenerated Code - do not edit directly */
#pragma once

#include <stdint.h>
#include <jude/core/c/jude_enum.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef uint%SIZE%_t %BITMASK%_t;
extern const jude_bitmask_map_t %BITMASK%_bitmask_map[];

#ifdef __cplusplus
}

#include <jude/jude.h>

namespace jude 
{

class %BITMASK% : public BitMask
{
public:
   enum Value
   {
%VALUES%,
      __INVALID_VALUE
   };

   %BITMASK%(Object& parent, jude_size_t fieldIndex, jude_size_t arrayIndex = 0)
      : BitMask(%BITMASK%_bitmask_map[0], parent, fieldIndex, arrayIndex)
   {}

   static const char*  GetString(Value value);
   static const char*  GetDescription(Value value);
   static const Value* FindValue(const char* name);
   static       Value  GetValue(const char* name);

   // Backwards compatibility
   static auto  AsText(Value value) { return GetString(value); };

%BIT_ACCESSORS%
};

} /* namespace jude */

#endif

'''

   bitmask_accessors_template = '''
   bool Is_%BIT%() const { return BitMask::IsBitSet(%BIT%); }
   void Set_%BIT%()      { return BitMask::SetBit(%BIT%);   }
   void Clear_%BIT%()    { return BitMask::ClearBit(%BIT%); }
'''

   bitmask_source_template = '''
#include "%BITMASK%.h"

extern "C" const jude_bitmask_map_t %BITMASK%_bitmask_map[] = 
{
%VALUES%,
   JUDE_ENUM_MAP_END
};

namespace jude
{
   const jude_size_t %BITMASK%_COUNT = (jude_size_t)(sizeof(%BITMASK%_bitmask_map) / sizeof(%BITMASK%_bitmask_map[0]));

   const char* %BITMASK%::GetString(%BITMASK%::Value value)
   {
      return jude_enum_find_string(%BITMASK%_bitmask_map, value);
   }

   const char* %BITMASK%::GetDescription(%BITMASK%::Value value)
   {
      return jude_enum_find_description(%BITMASK%_bitmask_map, value);
   }

   const %BITMASK%::Value* %BITMASK%::FindValue(const char* name)
   {
      return (const %BITMASK%::Value*)jude_enum_find_value(%BITMASK%_bitmask_map, name);
   }

   %BITMASK%::Value %BITMASK%::GetValue(const char* name)
   {
      return (%BITMASK%::Value)jude_enum_get_value(%BITMASK%_bitmask_map, name);
   }
}
'''

   def __init__(self, importPrefix, name, bitmask_def):
      
      print("Parsing bitmask: ", name, "...")

      self.name = name
      self.importPrefix = importPrefix
      self.bits = []
      self.size = 8

      for label, data in bitmask_def.items():

         bit = 0
         description = ''
         if isinstance(data,dict):
            if not data.__contains__('bit'):
               raise SyntaxError("bitmask bit defined as dictionary but no 'bit' given: " + data)
            bit = int(data['bit'])
            if data.__contains__('description'):
               description = data['description']
         elif isinstance(data,int):
            bit = data
         else:
            raise SyntaxError("bitmask element not defined as dictionary or int: " + bit)
         
         if bit < 0 or bit > 63:
            raise SyntaxError("bitmask bit value %d is not allowed, should be in range [0,63]" % bit)
         
         if bit > 7 and self.size < 16:
            self.size = 16
         elif bit > 15 and self.size < 32:
            self.size = 32
         if bit > 31:
            self.size = 64

         self.bits.append((label, bit, description))

      # sort list by the bit values
      self.bits = sorted(self.bits, key=lambda x: x[1])
   
   def create_object(self):
      c_values = ',\n'.join(["      %s = %d" % (x, y) for (x,y,z) in self.bits])
      
      bit_accessors = ''.join([self.bitmask_accessors_template \
                                 .replace("%BITMASK%", str(self.name))\
                                 .replace("%BIT%", str(x)) for (x,y,z) in self.bits])
      return self.bitmask_object_template.replace("%VALUES%", str(c_values)) \
                         .replace("%SIZE%", str(self.size)) \
                         .replace("%BITMASK%", str(self.name)) \
                         .replace("%BIT_ACCESSORS%", str(bit_accessors)) \
                         .replace("%FILE%", str(self.name).upper())
       
   def create_source(self):
      values = ',\n'.join(['   JUDE_ENUM_MAP_ENTRY(%s, %s, "%s")' % (x,y,z) for (x,y,z) in self.bits])
      return self.bitmask_source_template.replace("%VALUES%", str(values)) \
                        .replace("%BITMASK%", str(self.name)) \
                        .replace("%FILE%", str(self.name).upper())
